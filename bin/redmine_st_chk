#!/usr/bin/env ruby
# encoding: utf-8

require 'trinity'

project_name = 'tvkinoradio-web'
qa_users = %w(55)

per_issue_sleep_delay = 0.5

loop do

  begin

    issues = []

    # Resolved issues not assigned to author
    query_id = 79
    issues = Trinity::Redmine.fetch_issues_by_filter_id(query_id, {})

    issues.each do |issue|

      next if !issue.respond_to? 'assigned_to'
      next if issue.assigned_to.id.eql? issue.author.id

      date = Date.parse(Time.now.to_s)
      note = 'Ваша задача требует проверки. Установлена новая дата выполнения.';

      issue.done_ratio = 100
      issue.due_date = date.strftime('%Y-%m-%d')
      issue.assigned_to_id = issue.author.id
      issue.notes = note

      issue.save

      sleep per_issue_sleep_delay
    end

    # Issues with changesets detected but not assigned
    query_id = 80
    issues = Trinity::Redmine.fetch_issues_by_filter_id(query_id, {:project_id => project_name})

    issues.each do |issue|

      current = Trinity::Redmine::Issue.find(issue.id, :params => {:include => 'changesets'})

      if !current.changesets.empty? && current.changesets.first.user.id
        next if current.assigned_to.id = current.changesets.first.user.id
        current.assigned_to_id = current.changesets.first.user.id
        current.notes = 'Исполнителем задачи назначем автор первого коммита.'
        current.save
      end

      sleep per_issue_sleep_delay
    end

    # time_to qa
    query_id = 91
    issues = Trinity::Redmine.fetch_issues_by_filter_id(query_id, {:project_id => project_name})

    date = Date.parse(Time.now.to_s)

    issues.each do |issue|
      if !issue.assigned_to.nil?
        next if qa_users.include?(issue.assigned_to.id)
      end

      issue.assigned_to_id = qa_users.sample(1).join
      issue.due_date = date.strftime('%Y-%m-%d')
      issue.notes = 'Задача проверена менеджером. Требует QA.'
      issue.save

      sleep per_issue_sleep_delay
    end


    # TODO Отклоненные задачи, не назначенные на разработчика, который последним вносил коммит

    query_id = 88
    issues = Trinity::Redmine.fetch_issues_by_filter_id(query_id, {:project_id => project_name})

    issues.each do |issue|

      current = Trinity::Redmine::Issue.find(issue.id, :params => {:include => 'changesets'})

      if current.respond_to? 'assigned_to'

        assigned_to_id = current.assigned_to.id

        if current.changesets.last.respond_to? 'user'
          last_user_id = current.changesets.last.user.id
          current.notes = "Задача отклонена.\nНеобходимо ее исправить и установить статус Решена.\nПереназначено на разработчика, который делал коммит последним."
          current.assigned_to_id = last_user_id
        else
          next if current.priority.id.to_i.eql? 6
          current.notes = "Мне не удалось найти разработчика по коммитам к задаче.\nВероятно их никто не делал.\nВам необходимо вручную найти в истории имя разработчика и переназначить задачу на него."
        end

        puts current.notes

        puts "Current: #{assigned_to_id}"
        puts "Changeset: #{last_user_id}"
      else
        current.assigned_to_id = current.author.id
        current.notes = "Задача была отклонена и ни на кого не назначена.\nПереназначена на автора."
      end

      current.priority_id = 6
      current.save

    end

  rescue ActiveResource::ServerError => e
    puts "We have problem while handling response from Redmine server. Sleep for a while."
    sleep 60
  ensure
    puts "Sleep for a while..."
    sleep 30
  end

end #end loop